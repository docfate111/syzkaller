include <uapi/linux/fs.h>
include <linux/bcachefs_fs.h>
include <linux/uuid.h>
include <fs/bcachefs/bcachefs.h>
include <uapi/linux/bcachefs.h>

ioctl$BCH_IOCTL_QUERY_UUID(fd fd, cmd const[BCH_IOCTL_QUERY_UUID], arg ptr[in, int32])
ioctl$BCH_IOCTL_FS_USAGE(fd fd, cmd const[BCH_IOCTL_FS_USAGE], arg ptr[in, bch_ioctl_fs_usage])
ioctl$BCH_IOCTL_DEV_USAGE(fd fd, cmd const[BCH_IOCTL_DEV_USAGE], arg ptr[in, bch_ioctl_dev_usage])
ioctl$BCH_IOCTL_START(fd fd, cmd const[BCH_IOCTL_START], arg ptr[in, bch_ioctl_start])
#ioctl$BCH_IOCTL_STOP(fd fd, cmd const[BCH_IOCTL_STOP], arg const[0])
ioctl$BCH_IOCTL_READ_SUPER(fd fd, cmd const[BCH_IOCTL_READ_SUPER], arg ptr[in, bch_ioctl_read_super])
ioctl$BCH_IOCTL_DISK_GET_IDX(fd fd, cmd const[BCH_IOCTL_DISK_GET_IDX], arg ptr[in, bch_ioctl_disk_get_idx])
ioctl$BCH_IOCTL_DISK_ADD(fd fd, cmd const[BCH_IOCTL_DISK_ADD], arg ptr[in, bch_ioctl_disk])
ioctl$BCH_IOCTL_DISK_REMOVE(fd fd, cmd const[BCH_IOCTL_DISK_REMOVE], arg ptr[in, bch_ioctl_disk])
ioctl$BCH_IOCTL_DISK_ONLINE(fd fd, cmd const[BCH_IOCTL_DISK_ONLINE], arg ptr[in, bch_ioctl_disk])
ioctl$BCH_IOCTL_DISK_OFFLINE(fd fd, cmd const[BCH_IOCTL_DISK_OFFLINE], arg ptr[in, bch_ioctl_disk])
ioctl$BCH_IOCTL_DISK_SET_STATE(fd fd, cmd const[BCH_IOCTL_DISK_SET_STATE], arg ptr[in, bch_ioctl_disk_set_state])
#ioctl$BCH_IOCTL_DATA(fd fd, cmd const[BCH_IOCTL_DATA], arg ptr[in, bch_ioctl_data])
ioctl$BCH_IOCTL_DISK_RESIZE(fd fd, cmd const[BCH_IOCTL_DISK_RESIZE], arg ptr[in, bch_ioctl_disk_resize])
ioctl$BCH_IOCTL_DISK_RESIZE_JOURNAL(fd fd, cmd const[BCH_IOCTL_DISK_RESIZE_JOURNAL], arg ptr[in, bch_ioctl_disk_resize_journal])
#ioctl$BCH_IOCTL_ASSEMBLE(fd fd, cmd const[BCH_IOCTL_ASSEMBLE], arg ptr[in, bch_ioctl_assemble])
ioctl$BCH_IOCTL_INCREMENTAL(fd fd, cmd const[BCH_IOCTL_INCREMENTAL], arg ptr[in, bch_ioctl_incremental])

bch_ioctl_fs_usage {
	capacity int64
	used int64
	online_reserved int64
	#persistent_reserved array[int64, BCH_REPLICAS_MAX]
	#sectors array[array[int64, BCH_DATA_NR], BCH_REPLICAS_MAX]
	replica_entries_bytes int32
	pad int32
	replicas bch_replicas_usage
}


bch_ioctl_dev_usage {
	dev int64
	flags int32
	state int8
	pad array[int8, 7]
	bucket_size int32
	nr_buckets int64
	available_buckets int64
	ec_buckets int64
	ec_sectors int64
#	buckets array[int64, BCH_DATA_NR]
#        sectors array[int64, BCH_DATA_NR]
}

bch_ioctl_start {
	flags int32
	pad int32
}

bch_ioctl_read_super {
	flags int32
	pad int32
	dev int64
	size int64
	sb int64
}

bch_ioctl_disk_get_idx {
	dev int64
}

bch_ioctl_disk_set_state {
	flags int32
	new_state int8
	pad array[int64, 3]
	dev int64
}

#bpos { 
#	inode int64
#	offset int64
#	snapshot int64
#}

#migrate {
#	dev int32
#	pad int32
#}

#bch_ioctl_data {
#	op int32
#	flags int32
#	start bpos
#	end bpos
#	m migrate
#}

bch_ioctl_disk {
	flags int32
	pad int32
	dev int64
}

bch_ioctl_disk_resize_journal {
	flags int32
	pad int32
	dev int64
	nbuckets int64
}

bch_ioctl_disk_resize {
	flags int32
	pad int32
	dev int64
	nbuckets int64
}

#bch_ioctl_assemble {
#	flags int32
#	nr_devs int32
#	pad int64
#	devs array[int64]
#}

bch_ioctl_incremental {
	flags int32
	pad int64
	dev int64
}
